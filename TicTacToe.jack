class TicTacToe {
    field Array board;
    field String blank, X, O;
    field int currentPlayer;
    field String currentPlayerSymbol;

    constructor TicTacToe new() {
        var Array arr1, arr2, arr3;
        var int i;

        let blank= " ";
        let board = Array.new(3);
        
        let arr1 = Array.new(3);
        let i = 0;
        while (i < 3) {
            let arr1[i] = blank;
            let i = i + 1;
        }
        let board[0] = arr1;

        let arr2 = Array.new(3);
        let i = 0;
        while (i < 3) {
            let arr2[i] = blank;
            let i = i + 1;
        }
        let board[1] = arr2;

        let arr3 = Array.new(3);
        let i = 0;
        while (i < 3) {
            let arr3[i] = blank;
            let i = i + 1;
        }
        let board[2] = arr3;
        
        let X = "X";
        let O = "O";
        let currentPlayer = 1;
        let currentPlayerSymbol = X;
        return this;
    }


    method void drawBoard() {
        var arr temp;
        var int i, j;
        var int cnt;
        do Screen.clearScreen();
        do Output.moveCursor(0, 0);

        let i = 0;
        while (i < 3) {
            do Output.printString(" ");
            let j = 0;
            while (j < 3) {
                let temp = board[i];
                do Output.printString(temp[j]);
                
                if (j < 2) {
                    do Output.printString(" | ");
                }
                let j = j + 1;
            }
            do Output.println();
            do Output.printString(" ");
            let cnt = 0;
            if (i < 2) {
                while (cnt < 9) {
                    do Output.printString("-");
                    let cnt = cnt + 1;
                }
            }
            do Output.println();
            let i = i + 1;
        }

        return;
    }


    method void UI() {
        var bool done, validMove;
        var int input;
        
        let done = false;
        let validMove = true;

        while (~(done)) {
            do drawBoard();
            do Output.println();
            do Output.println();

            do Output.printString("Player ");
            do Output.printInt(currentPlayer);
            do Output.printString(" (");
            do Output.printString(currentPlayerSymbol);
            do Output.printString("): ");
            let input = Keyboard.readInt("");

            if (input < 1 | input > 9) {
                let validMove = false;
            }

            if (~(Main.strcmp(currentPlayerSymbol(input) , blank))) {
                let validMove = false;
            }

            if (validMove) {
                if (currentPlayer = 1) {
                    do changeX(input);
                } else {
                    do changeO(input);
                }
                
                if (checkIfWon()) {
                    do drawBoard();
                    do Output.printString("congratulations player ");
                    do Output.printInt(currentPlayer);
                    do Output.printString(" Won!");
                    do Sys.halt();
                }

                if (checkIfDraw()) {
                    do drawBoard();
                    do Output.printString("oh no! it's a draw!");
                    do Sys.halt();
                }

                do changeCurrentPlayer();
            }

            let validMove = true;
        }
        return;
    }


    method void changeCurrentPlayer() {
        if (currentPlayer = 1) {
            let currentPlayer = 2;
            let currentPlayerSymbol = O;
            return;
        }
        
        let currentPlayer = 1;
        let currentPlayerSymbol = X;
        return;
    }

    method void changeX(int realPosition) {
        if (Main.strcmp(currentPlayerSymbol(realPosition), blank)) {
            do setValue(realPosition, X);
            return;
        }
        return;
    }

    method void changeO(int realPosition) {
        
        if (Main.strcmp(currentPlayerSymbol(realPosition), blank)) {
            do setValue(realPosition, O);
            return;
        }
        return;
    }

    method String currentPlayerSymbol(int realPosition) {
        var Array row;
        var int position;

        let position = realPosition - 1;
        if (position < 0 | position > 9) {
            return "";
        }
        

        let row = board[position / 3];
        return row[remainder(position, 3)];
    }

    method void setValue(int realPosition, String value) {
        var Array row;
        var int position;

        let position = realPosition - 1;
        if (position < 0 | position > 9) {
            return;
        }
        

        let row = board[position / 3];
        let row[remainder(position, 3)] = value;
        return;
    }

    method int remainder(int dividend, int divisor) {
        
        if (divisor = 0) {
            do Sys.error(14);
            return 0;
        }
      while((dividend > divisor)|(dividend=divisor)) {
          let  dividend = dividend - divisor;
        }
       
        return dividend;
    }

    method bool checkIfWon() {
        var Array arr1, arr2, arr3;

        let arr1 = board[0];
        let arr2 = board[1];
        let arr3 = board[2];

        // Checking Horizontally
        
        if ((arr1[0] = arr1[1]) & (arr1[1] = arr1[2])) {
            if (~(Main.strcmp(arr1[0], " ")) & ~(Main.strcmp(arr1[1], " ")) & ~(Main.strcmp(arr1[2], " "))) {
                return true;
            }
        }

        if ((arr2[0] = arr2[1]) & (arr2[1] = arr2[2])) {
            if (~(Main.strcmp(arr2[0], " ")) & ~(Main.strcmp(arr2[1], " ")) & ~(Main.strcmp(arr2[2], " "))) {
                return true;
            }
        }

        if ((arr3[0] = arr3[1]) & (arr3[1] = arr3[2])) {
          if (~(Main.strcmp(arr3[0], " ")) & ~(Main.strcmp(arr3[1], " ")) & ~(Main.strcmp(arr3[2], " "))) {
                return true;
            }
        }

        // Checking Vertically
        if ((arr1[0] = arr2[0]) & (arr2[0] = arr3[0])) {
   if (~(Main.strcmp(arr1[0], " ")) & ~(Main.strcmp(arr2[0], " ")) & ~(Main.strcmp(arr3[0], " "))) {
                return true;
            }
        }

        if ((arr1[1] = arr2[1]) & (arr2[1] = arr3[1])) {
             if (~(Main.strcmp(arr1[1], " ")) & ~(Main.strcmp(arr2[1], " ")) & ~(Main.strcmp(arr3[1], " "))) {
                return true;
            }
        }

        if ((arr1[2] = arr2[2]) & (arr2[2] = arr3[2])) {
             if (~(Main.strcmp(arr1[2], " ")) & ~(Main.strcmp(arr2[2], " ")) & ~(Main.strcmp(arr3[2], " "))) {
                return true;
            }
        }

        // Checking Diagonally
        if ((arr1[0] = arr2[1]) & (arr2[1] = arr3[2])) {

             if (~(Main.strcmp(arr1[0], " ")) & ~(Main.strcmp(arr2[1], " ")) & ~(Main.strcmp(arr3[2], " "))) {
                return true;
            }
        }

        if ((arr1[2] = arr2[1]) & (arr2[1] = arr3[0])) {
             if (~(Main.strcmp(arr1[2], " ")) & ~(Main.strcmp(arr2[1], " ")) & ~(Main.strcmp(arr3[0], " "))) {
                return true;
            }
        }

        return false;
    }

    method bool checkIfDraw() {
        var Array temp;
        var int i;
        var int j;

        let i = 0;
        while (i < 3) {
            let temp = board[i];
            let j = 0;
            while (j < 3) {
                if (temp[j] = blank) {
                    return false;
                }
                let j = j + 1;
            }
            let i = i + 1;
        }

        return true;
    }

}